@page "/start"
@page "/"

@using FutterautomatenDatenbank.Context
@using FutterautomatenDatenbank.Models

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@rendermode InteractiveServer
@inject IFutterautomatenEFCoreRepository FutterautomatenEFCoreRepository
@inject AuthenticationStateProvider AuthenticationStateProvider



<h3>Start</h3>

<table class="table table-striped">
    <thead>
        <tr>
            <th scope="col">Futterautomat</th>
            <th scope="col">Daten</th>

        </tr>
    </thead>
    <tbody>

        @if (Futterautomaten is not null)
        {
            foreach (var automat in Futterautomaten)
            {
                <tr>
                    <CascadingValue Name="FutterautomatId" Value="@automat.FutterautomatId">
                        <FutterautomatComponent></FutterautomatComponent>
                        <br />
                    </CascadingValue>
                </tr>
            }
        }
        else
        {
            <tr>Lade Futterautomaten......</tr>
        }

    </tbody>
</table>



<br />
<br />
<div class="d-flex justify-content-around">
    @if (person is not null)
    {
        <button class="btn btn-success" @onclick="OnCreateButtonClicked">Neuen Futterautomaten erstellen</button>
        <text>&nbsp</text>
    }
    else
    {
        <label>Keine Person angemeldet</label>
    }
    <button type="button" class="btn btn-danger" @onclick="OnDeleteButtonClicked">Lösche alle Futterautomaten</button>
</div>





@code {
    string angemeldeterUser = string.Empty;
    public List<Futterautomat>? Futterautomaten;
    Person? person;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            angemeldeterUser = auth?.User?.Identity?.Name ?? "";
            if (!FutterautomatenEFCoreRepository.GetPersonen().Any(p => p.Name == angemeldeterUser))
            {
                person = new Person() { Name = angemeldeterUser };
                FutterautomatenEFCoreRepository.AddPerson(person);
            }
            else
            {
                person = FutterautomatenEFCoreRepository.GetPersonen().FirstOrDefault(p => p.Name == angemeldeterUser);
            }
            StateHasChanged();
        }
        person = FutterautomatenEFCoreRepository.GetPersonen().FirstOrDefault(p => p.Name == angemeldeterUser);
    }

    /// <summary>
    /// erstellt einen neuen Futterautomaten
    /// </summary>
    private void OnCreateButtonClicked()
    {
        if (person is null) return;
        Futterautomat futterautomat = new() { FutterFaktor = 1 };
        FutterautomatenEFCoreRepository.AddFutterautomat(futterautomat);
        if (person.Futterautomaten is null)
        {
            person.Futterautomaten = new List<Futterautomat>();
        }
        person.Futterautomaten.Add(futterautomat);
        FutterautomatenEFCoreRepository.UpdatePerson(person);
        Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
    }

    /// <summary>
    /// Löscht alle bestehenden Futterautomaten
    /// </summary>
    private void OnDeleteButtonClicked()
    {
        Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
        if (Futterautomaten is null) return;

        foreach (var futterautomat in Futterautomaten)
        {
            var inhaber = futterautomat.Person;
            if (inhaber is not null)
            {
                inhaber.Futterautomaten.Remove(futterautomat);
                FutterautomatenEFCoreRepository.UpdatePerson(inhaber);
            }

            FutterautomatenEFCoreRepository.DeleteFutterautomat(futterautomat.FutterautomatId);
        }

        Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
    }
}
