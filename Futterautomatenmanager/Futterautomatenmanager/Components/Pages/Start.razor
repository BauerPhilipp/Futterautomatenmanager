@page "/start"
@page "/"

@using FutterautomatenDatenbank.Context
@using FutterautomatenDatenbank.Models

@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

@rendermode InteractiveServer
@inject IFutterautomatenEFCoreRepository FutterautomatenEFCoreRepository
@inject AuthenticationStateProvider AuthenticationStateProvider



<h3>Start</h3>

@if (Futterautomaten is not null)
{
    @foreach (var automat in Futterautomaten)
    {
        <CascadingValue Name="FutterautomatId" Value="@automat.FutterautomatId">
            <FutterautomatComponent></FutterautomatComponent>
        </CascadingValue>
    }

}
else
{
    <p>Kein Futterautomat vorhanden?</p>
}


<br />
<br />
<button type="button" class="btn-secondary" @onclick="OnCreateButtonClicked">Neuen Futterautomaten erstellen</button>
<button type="button" class="btn-secondary" @onclick="OnDeliteButtonClicked">Lösche alle Futterautomaten</button>




@code {
    string angemeldeterUser = string.Empty;
    public List<Futterautomat>? Futterautomaten;
    Person? person; 


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
            var auth = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            angemeldeterUser = auth?.User?.Identity?.Name ?? "";
            if (!FutterautomatenEFCoreRepository.GetPersonen().Any(p => p.Name == angemeldeterUser))
            {
                person = new Person() {Name = angemeldeterUser};
                FutterautomatenEFCoreRepository.AddPerson(person);
            }
            else
            {
                person = FutterautomatenEFCoreRepository.GetPersonen().FirstOrDefault(p => p.Name == angemeldeterUser);
            }
            StateHasChanged();
        }
        person = FutterautomatenEFCoreRepository.GetPersonen().FirstOrDefault(p => p.Name == angemeldeterUser);
    }

    private void OnCreateButtonClicked()
    {
        if (person is null) return;
        Futterautomat futterautomat = new() { FutterFaktor = 1};
        FutterautomatenEFCoreRepository.AddFutterautomat(futterautomat);
        if (person.Futterautomaten is null)
        {
            person.Futterautomaten = new List<Futterautomat>();
        } 
        person.Futterautomaten.Add(futterautomat);
        var newPerson = new Person() {PersonId = person.PersonId, Name = person.Name, Futterautomaten = person.Futterautomaten};
        FutterautomatenEFCoreRepository.UpdatePerson(person.PersonId, newPerson);
        Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
    }

    private void OnDeliteButtonClicked()
    {
        Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
        if (Futterautomaten is null) return;

        foreach (var futterautomat in Futterautomaten)
        {
            FutterautomatenEFCoreRepository.DeleteFutterautomat(futterautomat.FutterautomatId);
            var person = futterautomat.Person;
            if (person is null) return;
            person.Futterautomaten.Remove(futterautomat);
            FutterautomatenEFCoreRepository.UpdatePerson(person.PersonId, person);
        }
        Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
    }

}
