@page "/start"
@page "/"

@rendermode InteractiveServer
@inject IFutterautomatenEFCoreRepository FutterautomatenEFCoreRepository

@using FutterautomatenDatenbank.Context
@using FutterautomatenDatenbank.Models

<h3>Start</h3>

@if(Futterautomaten is not null)
{
    @foreach (var automat in Futterautomaten)
    {
        <CascadingValue Name="FutterautomatId" Value="@automat.FutterautomatId">
            <FutterautomatComponent></FutterautomatComponent>
        </CascadingValue>
    }

}
else
{
    <p>Kein Futterautomat vorhanden?</p>
}


<br /><br />
<button type="button" class="btn-secondary" @onclick="OnCreateButtonClicked">Neuen Futterautomaten erstellen</button>
<button type="button" class="btn-secondary" @onclick="OnDeliteButtonClicked">Lösche alle Futterautomaten</button>
 



@code {
    Random random = new Random();
    public List<Futterautomat>? Futterautomaten;


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
            StateHasChanged();
        }

    }

    private void OnCreateButtonClicked()
    {
        Futterautomat futterautomat = new() {FutterFaktor = random.Next(1,100) };
        FutterautomatenEFCoreRepository.AddFutterautomat(futterautomat);
        Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
    }

    private void OnDeliteButtonClicked()
    {
        var futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
        if (futterautomaten is null) return;
        foreach (var futterautomat in futterautomaten)
        {
            FutterautomatenEFCoreRepository.DeleteFutterautomat(futterautomat.FutterautomatId);
        }
        Futterautomaten = FutterautomatenEFCoreRepository.GetFutterautomaten();
    }

}
