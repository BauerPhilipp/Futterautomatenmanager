@page "/neuerfutterautomat/{PersonId:int}"
@page "/neuerfutterautomat/update/{FutterautomatId:int}"


@rendermode InteractiveServer
@inject IFutterautomatenEFCoreRepository FutterautomatenEFCoreRepository
@inject NavigationManager navigationManager
@using FutterautomatenDatenbank.Context
@using FutterautomatenDatenbank.Models

<h3 class="text-center">@((FutterautomatId >= 0) ? "Futterautomat anpassen" : "Neuen Futterautomat erstellen")</h3>

<form>
    <div class="form-group">
        <label for="bezeichnung">Bezeichnung</label>
        <input type="text" class="form-control" id="bezeichnung" @bind="BezeichnungFutterautomat">
    </div>
    <br />
    <div class="form-group">
        <label for="ControlSelect1">Futter</label>
        @if (futterArten is not null && futterArten.Count > 0)
        {
            <select class="form-control" id="ControlSelect1" @onchange="OnFutterSelected">
                @foreach (var futterArt in futterArten)
                {
                    <option value="@futterArt.FutterName">@futterArt.FutterName</option>
                }
            </select>
        }
        <br />
        <a class="btn btn-primary" @onclick="NeuesFutterErstellen">Neues Futter</a>
    </div>
    <br />
    <div class="form-group">
        <label for="faktorFuetterungen">Faktor Fütterungen</label>
        <input type="number" class="form-control" id="faktorFuetterungen" @bind="FaktorFuetterungen">
    </div>
    <br />
    <div class="form-group">
        <label for="ControlSelect2">Aquarium</label>
        @if (aquarien is not null && aquarien.Count > 0)
        {
            <select class="form-control" id="ControlSelect2" @onchange="OnAquariumSelected">
                @foreach (var aquarium in aquarien)
                {
                    <option value="@aquarium.Name">@aquarium.Name</option>
                }
            </select>
        }
        <br />
        <a class="btn btn-primary" @onclick="NeuesAquarium">Neues Aquarium</a>

    </div>



    <br /><br />
    <button type="button" class="btn-primary" @onclick="Save">Speichern</button>
</form>

@code {
    string s = "";
    [Parameter]
    public int FutterautomatId { get; set; } = -1;

    [Parameter]
    public int PersonId { get; set; }

    string ausgewaehltesAquarium = string.Empty;
    string ausgewaehltesFutter = string.Empty;

    public float FaktorFuetterungen { get; set; } = 1;

    public string BezeichnungFutterautomat { get; set; } = string.Empty;

    private List<Aquarium>? aquarien;
    private List<Futter>? futterArten;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //Initialisere Listen
            aquarien = FutterautomatenEFCoreRepository.GetAquarien();
            if (aquarien is not null) ausgewaehltesAquarium = aquarien.First().Name;
            futterArten = FutterautomatenEFCoreRepository.GetFutter();
            if (futterArten is not null) ausgewaehltesFutter = futterArten.First().FutterName;
            ausgewaehltesAquarium = aquarien.First().Name;

            if (FutterautomatId > 0)
            {
                var futterautomat = FutterautomatenEFCoreRepository.GetFutterautomat(FutterautomatId);
                BezeichnungFutterautomat = futterautomat.Bezeichnung;
                FaktorFuetterungen = futterautomat.FutterFaktor;
            }

            StateHasChanged();
        }
    }

    private void NeuesAquarium()
    {
        if (FutterautomatId > 0) navigationManager.NavigateTo($"/neuesaquarium/{FutterautomatId}");
    }
    private void OnAquariumSelected(ChangeEventArgs e)
    {
        ausgewaehltesAquarium = e.Value.ToString();
    }

    private void OnFutterSelected(ChangeEventArgs e)
    {
        ausgewaehltesFutter = e.Value.ToString();
    }

    //Speichern / Aktualisieren Futterautomat
    private void Save()
    {
        if (FutterautomatId > 0)
        {
            var neuerFutterautomat = new Futterautomat()
                {
                    Bezeichnung = BezeichnungFutterautomat,
                    FutterFaktor = FaktorFuetterungen,
                    //Fuetterungen = ?;
                };

            FutterautomatenEFCoreRepository.UpdateFutterautomat(FutterautomatId, neuerFutterautomat);
            UpdateFutterautomat(neuerFutterautomat);
            UpdateAquarium();
            UpdateFutter();
        }
        navigationManager.NavigateTo("/");
    }


    private void UpdateAquarium()
    {
        Aquarium aquarium;
        if(ausgewaehltesAquarium != "")
        {

            aquarium = FutterautomatenEFCoreRepository.GetAquarien().First(a => a.Name == ausgewaehltesAquarium);
            var futterautomat = FutterautomatenEFCoreRepository.GetFutterautomat(FutterautomatId);
            aquarium.Futterautomaten.Add(futterautomat);

            FutterautomatenEFCoreRepository.UpdateAquarium(aquarium);  
        }
    }
    private void UpdateFutter()
    {
        Futter futter;
        if(ausgewaehltesFutter != "")
        {
            futter = FutterautomatenEFCoreRepository.GetFutter().First(a => a.FutterName == ausgewaehltesFutter);
            var futterautomat = FutterautomatenEFCoreRepository.GetFutterautomat(FutterautomatId);
            futter.Futterautomaten.Add(futterautomat);
            FutterautomatenEFCoreRepository.UpdateFutter(futter);
        }
    }

    private void UpdateFutterautomat(Futterautomat futterautomat)
    {
        futterautomat.FutterautomatId = FutterautomatId;
        FutterautomatenEFCoreRepository.UpdateFutterautomat(FutterautomatId, futterautomat);
    }

    private void NeuesFutterErstellen()
    {

        navigationManager.NavigateTo($"/neuesfutter/{FutterautomatId}");
    }


}
