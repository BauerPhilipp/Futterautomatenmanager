@page "/neuerfutterautomat/{PersonId:int}"
@page "/neuerfutterautomat/update/{FutterautomatId:int}"


@rendermode InteractiveServer
@inject IFutterautomatenEFCoreRepository FutterautomatenEFCoreRepository
@inject NavigationManager navigationManager
@using FutterautomatenDatenbank.Context
@using FutterautomatenDatenbank.Models

<h3 class="text-center">@((FutterautomatId >= 0) ? "Futterautomat anpassen" : "Neuen Futterautomat erstellen")</h3>

<form>
    <div class="form-group">
        <label for="bezeichnung">Bezeichnung</label>
        <input type="text" class="form-control" id="bezeichnung" @bind="BezeichnungFutterautomat">
    </div>
    <br />
    <div class="form-group">
        <label for="ControlSelect1">Futter</label>
        @if (futterArten is not null && futterArten.Count > 0)
        {
            <select class="form-control" id="ControlSelect1" @onchange="OnFutterSelected">
                @foreach (var futterArt in futterArten)
                {
                    <option value="@futterArt.FutterName">@futterArt.FutterName</option>
                }
            </select>
        }
        <br />
        <a class="btn btn-primary" @onclick="NeuesFutterErstellen">Neues Futter</a>
    </div>
    <br />
    <div class="form-group">
        <label for="ControlFuetterungen">Fütterungen</label>
        @if (fuetterungen is not null && fuetterungen.Count > 0)
        {
            <table class="table table-striped">
                <thead>
                    <text>von diesem Futterautomaten</text>
                </thead>
                <tbody>
                    @foreach (var fuetterung in fuetterungen.Where(f => f.Futterautomat.FutterautomatId == FutterautomatId))
                    {
                        <tr>
                            <td>
                                Tag: @fuetterung.Tag
                            </td>
                            <td>
                                Uhrzeit: @fuetterung.Uhrzeit
                            </td>
                            <td>
                                Futtermenge pro Fütterung: @fuetterung.Futtermenge mm
                            </td>
                            <td>
                                Wiederholende Fütterung: @(fuetterung.WiederholendeFuetterung ? "Ja" : "Nein")
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger" @onclick=@(() => FuetterungLoeschen(fuetterung.FuetterungId))>Löschen</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        <br />
        <a class="btn btn-primary" @onclick="NeueFuetterungErstellen">Neue Fütterung</a>
    </div>
    <br />
    <div class="form-group">
        <label for="faktorFuetterungen">Faktor Fütterungen</label>
        <input type="number" class="form-control" id="faktorFuetterungen" @bind="FaktorFuetterungen">
    </div>
    <br />
    <div class="form-group">
        <label for="ControlAquarium">Aquarium</label>
        @if (aquarien is not null && aquarien.Count > 0)
        {
            <select class="form-control" id="ControlAquarium" @onchange="OnAquariumSelected">
                @foreach (var aquarium in aquarien)
                {
                    <option value="@aquarium.Name">@aquarium.Name</option>
                }
            </select>
        }
        <br />
        <a class="btn btn-primary" @onclick="NeuesAquarium">Neues Aquarium</a>
    </div>
    <br />
    <div class="form-group">
        <input type="checkbox" class="form-check-input" id="ManuelleFuetterung" @bind="ManuelleFuetterung">&nbsp;
        <label for="ManuelleFuetterung">Modus manuelle Fütterung</label>
    </div>
    <br />
    <br />
    <div class="d-flex justify-content-between">
        <button type="button" class="btn-success" @onclick="() => Speichern()">Speichern</button>
        <button type="button" class="btn-danger" @onclick="() => LoeschenFutterautomat()">Löschen</button>
    </div>
</form>
<br />
@if (IsFehler)
{
    <div class="row">
        <div class="col-12">
            <textarea style="color:red; width:100%; height:300px;">@fehlerLabel</textarea>
        </div>
    </div>
}

@code {
    string s = ""; //noch in verwendung?
    /// <summary>
    /// Parameter aus der URI
    /// </summary>
    [Parameter]
    public int FutterautomatId { get; set; } = -1;
    /// <summary>
    /// Parameter aus der URI
    /// </summary>
    [Parameter]
    public int PersonId { get; set; }
    /// <summary>
    /// Manuelle Fütterung aktivieren
    /// </summary>
    public bool ManuelleFuetterung { get; set; }

    string ausgewaehltesAquarium = string.Empty;
    string ausgewaehltesFutter = string.Empty;
    string ausgewaehlteFuetterung = string.Empty;
    /// <summary>
    /// Multiplikator für die Futtermenge
    /// </summary>
    public float FaktorFuetterungen { get; set; } = 1;

    public string BezeichnungFutterautomat { get; set; } = string.Empty;
    //true wenn ein fehler auftritt zur anzeige der Fehlermeldung
    private bool IsFehler { get; set; }
    //Fehlermeldung
    private string fehlerLabel = "Bezeichnung ist bereits vergeben!";

    private List<Aquarium>? aquarien;
    private List<Futter>? futterArten;
    private List<Fuetterung>? fuetterungen;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //Initialisere Listen
            aquarien = FutterautomatenEFCoreRepository.GetAquarien().LastElementFirst();
            if (aquarien is not null && aquarien.Count > 0)
                ausgewaehltesAquarium = aquarien.First().Name;
            futterArten = FutterautomatenEFCoreRepository.GetFutter().LastElementFirst();
            if (futterArten is not null && futterArten.Count > 0)
                ausgewaehltesFutter = futterArten.First().FutterName;
            fuetterungen = FutterautomatenEFCoreRepository.GetFuetterungen().LastElementFirst();
            if (fuetterungen is not null && fuetterungen.Count > 0)
                ausgewaehlteFuetterung = $"{fuetterungen.First().Tag}, {fuetterungen.First().Uhrzeit}";


            if (FutterautomatId > 0)
            {
                var futterautomat = FutterautomatenEFCoreRepository.GetFutterautomat(FutterautomatId);
                BezeichnungFutterautomat = futterautomat.Bezeichnung;
                FaktorFuetterungen = futterautomat.FutterFaktor;
                ManuelleFuetterung = futterautomat.ManuelleFuetterung;
            }

            StateHasChanged();
        }
    }
    /// <summary>
    /// Navigation zur Page für neue Aquarien
    /// </summary>
    private void NeuesAquarium()
    {
        // if (FutterautomatId > 0) navigationManager.NavigateTo($"/neuesaquarium/{FutterautomatId}");
        if (FutterautomatId > 0) Speichern($"/neuesaquarium/{FutterautomatId}");
    }
    /// <summary>
    /// Navigation zur Page für neue Fütterung
    /// </summary>
    private void NeueFuetterungErstellen()
    {
        //navigationManager.NavigateTo($"/neuefuetterung/{FutterautomatId}");
        if (FutterautomatId > 0) Speichern($"/neuefuetterung/{FutterautomatId}");
    }
    /// <summary>
    /// Navigation zur Page für neues Futter
    /// </summary>
    private void NeuesFutterErstellen()
    {

        //navigationManager.NavigateTo($"/neuesfutter/{FutterautomatId}");
        if (FutterautomatId > 0) Speichern($"/neuesfutter/{FutterautomatId}");
    }
    /// <summary>
    /// Wird ausgeführt wenn ein neues Aquarium ausgewählt wurde
    /// </summary>
    /// <param name="e"></param>
    private void OnAquariumSelected(ChangeEventArgs e)
    {
        ausgewaehltesAquarium = e.Value.ToString();
    }

    /// <summary>
    /// Wird ausgeführt wenn ein neues Futter ausgewählt wurde
    /// </summary>
    /// <param name="e"></param>
    private void OnFutterSelected(ChangeEventArgs e)
    {
        ausgewaehltesFutter = e.Value.ToString();
    }
    /// <summary>
    /// Wird ausgeführt wenn eine neue Fütterunt ausgewählt wurde
    /// </summary>
    /// <param name="e"></param>
    private void OnFuetterungSelected(ChangeEventArgs e)
    {
        //TODO: Methode nicht mehr in verwendung?
        ausgewaehlteFuetterung = e.Value.ToString();
    }

    /// <summary>
    /// Speichern bzw. aktualisieren des Futterautomaten 
    /// </summary>
    /// <param name="navLink"></param>
    private void Speichern(string navLink = "/")
    {
        if (FutterautomatId > 0)
        {
            var neuerFutterautomat = new Futterautomat()
                {
                    Bezeichnung = BezeichnungFutterautomat,
                    FutterFaktor = FaktorFuetterungen,
                    ManuelleFuetterung = this.ManuelleFuetterung
                };

            bool bezeichnungBereitsVergeben = FutterautomatenEFCoreRepository.GetFutterautomaten()
            .Any(f => f.Bezeichnung.ToLower() == neuerFutterautomat.Bezeichnung.ToLower());

            if (bezeichnungBereitsVergeben && FutterautomatenEFCoreRepository.GetFutterautomat(FutterautomatId)
            .Bezeichnung.ToLower() != BezeichnungFutterautomat.ToLower())
            {
                IsFehler = true;
                return;
            }

            UpdateFutterautomat(neuerFutterautomat);
            UpdateAquarium();
            UpdateFutter();
        }
        navigationManager.NavigateTo(navLink);
    }

    /// <summary>
    /// Aktualisiert das Aquarium
    /// </summary>
    private void UpdateAquarium()
    {
        Aquarium aquarium;
        if (ausgewaehltesAquarium != "")
        {

            aquarium = FutterautomatenEFCoreRepository.GetAquarien().First(a => a.Name == ausgewaehltesAquarium);
            var futterautomat = FutterautomatenEFCoreRepository.GetFutterautomat(FutterautomatId);
            aquarium.Futterautomaten.Add(futterautomat);

            FutterautomatenEFCoreRepository.UpdateAquarium(aquarium);
        }
    }

    /// <summary>
    /// Aktualisiert das Futter
    /// </summary>
    private void UpdateFutter()
    {
        Futter futter;
        if (ausgewaehltesFutter != "")
        {
            futter = FutterautomatenEFCoreRepository.GetFutter().First(a => a.FutterName == ausgewaehltesFutter);
            var futterautomat = FutterautomatenEFCoreRepository.GetFutterautomat(FutterautomatId);
            futter.Futterautomaten.Add(futterautomat);
            FutterautomatenEFCoreRepository.UpdateFutter(futter);
        }
    }

    /// <summary>
    /// Aktualisiert die Fütterungen
    /// </summary>
    private void UpdateFuetterungen()
    {
        if (ausgewaehlteFuetterung != "")
        {
            var fuetterung = FutterautomatenEFCoreRepository.GetFuetterungen().First(f =>
            {
                string vergleich = $"{f.Tag}, {f.Uhrzeit}";
                return ausgewaehlteFuetterung == vergleich;
            });

            var fuetterungNeu = new Fuetterung()
                {
                    FuetterungId = fuetterung.FuetterungId,
                    Futtermenge = fuetterung.Futtermenge,
                    Tag = fuetterung.Tag,
                    Uhrzeit = fuetterung.Uhrzeit,
                };

            // fuetterung.Futterautomat = FutterautomatenEFCoreRepository.GetFutterautomat(FutterautomatId);
            FutterautomatenEFCoreRepository.UpdateFuetterung(fuetterungNeu);
        }
    }

    /// <summary>
    /// Aktualisiert den Futterautomaten
    /// </summary>
    /// <param name="futterautomat"></param>
    private void UpdateFutterautomat(Futterautomat futterautomat)
    {
        futterautomat.FutterautomatId = FutterautomatId;
        FutterautomatenEFCoreRepository.UpdateFutterautomat(FutterautomatId, futterautomat);
    }
    /// <summary>
    /// Löscht den Futterautomaten und Navigiert zur Startseite
    /// </summary>
    private void LoeschenFutterautomat()
    {
        FutterautomatenEFCoreRepository.DeleteFutterautomat(FutterautomatId);
        navigationManager.NavigateTo("/");
    }
    //// <summary>
    /// Löscht eine Fütterung mit der entsprechenden ID
    /// </summary>
    /// <param name="fuetterungId"></param>
    public void FuetterungLoeschen(int fuetterungId)
    {
        FutterautomatenEFCoreRepository.DeleteFuetterung(fuetterungId);
        fuetterungen = FutterautomatenEFCoreRepository.GetFuetterungen();
    }


}
